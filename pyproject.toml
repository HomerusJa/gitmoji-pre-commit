[project]
name = "gitmoji-pre-commit"
version = "0.1.0"
description = "A pre-commit hook checking if your commit messages comply with the gitmoji convention"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
  "requests>=2.32.3",
]

[tool.ruff]
line-length = 88

lint.select = [
  "ANN", # flake8-annotations
  "ARG", # flake8-unused-arguments
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "D",   # Pydocstyle
  "E",   # Pycodestyle errors
  "F",   # Pyflakes
  "I",   # Isort
  "N",   # Pep8 Naming Conventions
  "SIM", # flake8-simplify
  "W",   # Pycodestyle warnings
]
lint.ignore = [
  "ANN101", # Missing type annotation for self in method  (deprecated and not needed)
  "ANN204", # Missing return type annotation for special method (like __str__)
  "ANN401", # Use of the Any type (sometimes you need it)
  "D105",   # Missing docstring in special method (like __str__)
]
lint.per-file-ignores."__init__.py" = [ "D104" ] # Missing docstring in public package

lint.isort.known-first-party = [ "gitmoji_pre_commit" ]

# __init__.py files are not required to have docstrings
lint.pydocstyle.convention = "google"
lint.pydocstyle.ignore-decorators = [ "property", "reflex.var" ]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = """
    --cov=gitmoji_pre_commit
    --cov-report=term-missing
    --cov-report=xml:coverage.xml
    --cov-report=html:htmlcov
    --cov-branch
    --no-cov-on-fail
    -v
    --durations=10
    --color=yes
"""
testpaths = [ "tests" ]
pythonpath = [ "src" ]
filterwarnings = [
  "error",
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
]

[tool.coverage.run]
branch = true
source = [ "gitmoji_pre_commit" ]
omit = [
  "tests/*",
  "**/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "pass",
  "raise ImportError",
]
fail_under = 90
show_missing = true
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"

[dependency-groups]
dev = [
  "pre-commit>=4.0.1",
  "pytest>=8.3.3",
  "pytest-cov>=4.1.0",
  "pytest-sugar>=1.0.0",
  "responses>=0.25.3",
  "ruff>=0.7.3",
]
